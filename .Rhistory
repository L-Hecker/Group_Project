# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
runApp()
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity", value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
library(ggplot2)
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1,
max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color", label = "Color", choices = list(
"Red" = "red", "Blue" = "blue", "Green" = "green"
)
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('~/Desktop/ch16-shiny/exercise-3')
setwd("~/Desktop/groupproject")
setwd("~/Desktop/groupproject")
git status
git status
git pull
load("~/Desktop/Group_Project/.RData")
View(body)
View(body_content)
View(flattened)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
setwd("~/Desktop/Group_Project")
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
revenue_df$poster_path <- shQuote(paste0("https://image.tmdb.org/t/p/w500",
revenue_df$poster_path), type = "cmd")
revenue_info <- apply(id_list, 1, get_data)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
# Turn nested list into workable dataframe
revenue_df <- data.frame(t(sapply(revenue_info, c)),
stringsAsFactors = FALSE) %>%
select(
title, overview, budget, release_date,
revenue, runtime, popularity, homepage, poster_path, vote_average,
vote_count
)
revenue_df$earnings <- ifelse((as.numeric(revenue_df$revenue) -
as.numeric(revenue_df$budget)) < 0, 0,
as.numeric(revenue_df$revenue)
- as.numeric(revenue_df$budget)
)
revenue_df$poster_path <- shQuote(paste0("https://image.tmdb.org/t/p/w500",
revenue_df$poster_path), type = "cmd")
# Find earnings per minute
revenue_df <- revenue_df %>%
mutate(profit.per.minute = as.numeric(earnings)/as.numeric(runtime))
minimum <- min(as.numeric(revenue_df$runtime))
maximum <- max(as.numeric(revenue_df$runtime))
average <- mean(as.numeric(revenue_df$runtime))
shiny::runApp()
movie_choices <- as.list(revenue_df$title, all.names = TRUE)
names(movie_choices) <- revenue_df$title
runApp()
plot_ly(choice, x = ~ runtime, y = ~ profit.per.minute, color = ~ title,
colors = "Set1")
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
revenue_df$title <- as.character(revenue_df$title)
runApp()
minute_scatter <- function(df, amount){
choice <- filter(df, amount > runtime)
plot_ly(choice, x = ~ budget, y = ~ profit.per.minute, color = ~ title,
colors = "Set1")
}
shinyUI(navbarPage(
theme = shinytheme("slate"),
"Movie Report",
tabPanel(
"Movie Profits",
sidebarLayout(
sidebarPanel(
selectInput(
"movie",
label = "Choose Movie",
choices = movie_choices
),
htmlOutput("img1"),
tags$br(),
HTML("<strong>Story Line: </strong>"),
htmlOutput("overview")
),
mainPanel(
plotlyOutput("bar")
)
)
),
tabPanel(
"Profit Per Minute",
# Create sidebar layout
sidebarLayout(
sidebarPanel(
sliderInput(
"amount",
"USD/Minute",
min = minimum,
max = maximum,
value = average
)
),
tags$br()
),
mainPanel(
plotlyOutput("scatter")
)
)
)
)
shinyUI(navbarPage(
theme = shinytheme("slate"),
"Movie Report",
tabPanel(
"Movie Profits",
sidebarLayout(
sidebarPanel(
selectInput(
"movie",
label = "Choose Movie",
choices = movie_choices
),
htmlOutput("img1"),
tags$br(),
HTML("<strong>Story Line: </strong>"),
htmlOutput("overview")
),
mainPanel(
plotlyOutput("bar")
)
)
),
tabPanel(
"Profit Per Minute",
# Create sidebar layout
sidebarLayout(
sidebarPanel(
sliderInput(
"amount",
"USD/Minute",
min = minimum,
max = maximum,
value = average
)
),
tags$br()
),
mainPanel(
plotlyOutput("scatter")
)
)
)
)
shinyUI(navbarPage(
theme = shinytheme("slate"),
"Movie Report",
tabPanel(
"Movie Profits",
sidebarLayout(
sidebarPanel(
selectInput(
"movie",
label = "Choose Movie",
choices = movie_choices
),
htmlOutput("img1"),
tags$br(),
HTML("<strong>Story Line: </strong>"),
htmlOutput("overview")
),
mainPanel(
plotlyOutput("bar")
)
)
),
tabPanel(
"Profit Per Minute",
# Create sidebar layout
sidebarLayout(
sidebarPanel(
sliderInput(
"amount",
"USD/Minute",
min = minimum,
max = maximum,
value = average
)
),
tags$br()
),
mainPanel(
plotlyOutput("scatter")
)
)
)
)
runApp()
runApp()
runApp()
revenue_df <- revenue_df %>%
mutate(profit.per.minute = as.numeric(earnings)/as.numeric(runtime))
minimum <- min(as.numeric(revenue_df$runtime))
maximum <- max(as.numeric(revenue_df$runtime))
average <- mean(as.numeric(revenue_df$runtime))
shinyUI(navbarPage(
theme = shinytheme("slate"),
"Movie Report",
tabPanel(
"Movie Profits",
sidebarLayout(
sidebarPanel(
selectInput(
"movie",
label = "Choose Movie",
choices = movie_choices
),
htmlOutput("img1"),
tags$br(),
HTML("<strong>Story Line: </strong>"),
htmlOutput("overview")
),
mainPanel(
plotlyOutput("bar")
)
)
),
tabPanel(
"Profit Per Minute",
# Create sidebar layout
sidebarLayout(
sidebarPanel(
sliderInput(
"amount",
"USD/Minute",
min = minimum,
max = maximum,
value = average
)
),
tags$br()
),
mainPanel(
plotlyOutput("scatter")
)
)
)
)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
revenue_info <- apply(id_list, 1, get_data)
View(revenue_info)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
revenue_info <- apply(id_list, 1, get_data)
revenue_info <- apply(id_list, 1, get_data)
# Turn nested list into workable dataframe
revenue_df <- data.frame(t(sapply(revenue_info, c)),
stringsAsFactors = FALSE) %>%
select(
title, overview, budget, release_date,
revenue, runtime, popularity, homepage, poster_path, vote_average,
vote_count
)
revenue_df$earnings <- ifelse((as.numeric(revenue_df$revenue) -
as.numeric(revenue_df$budget)) < 0, 0,
as.numeric(revenue_df$revenue)
- as.numeric(revenue_df$budget)
)
revenue_df$poster_path <- shQuote(paste0("https://image.tmdb.org/t/p/w500",
revenue_df$poster_path), type = "cmd")
movie_choices <- as.list(revenue_df$title, all.names = TRUE)
names(movie_choices) <- revenue_df$title
# Find earnings per minute
revenue_df <- revenue_df %>%
mutate(profit.per.minute = as.numeric(earnings)/as.numeric(runtime))
minimum <- min(as.numeric(revenue_df$runtime))
maximum <- max(as.numeric(revenue_df$runtime))
average <- mean(as.numeric(revenue_df$runtime))
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
revenue_df$title <- as.character(revenue_df$title)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
# Find earnings per minute
revenue_df <- revenue_df %>%
mutate(profit_per_minute = as.numeric(earnings)/as.numeric(runtime))
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
plot_ly(choice, x = ~ profit_per_minute, y = ~ popularity, color = ~ title)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
revenue_df$title <- as.character(revenue_df$title)
revenue_df$popularity <- as.numeric(revenue_df$popularity)
revenue_df$profit_per_minute <- as.numeric(revenue_df$profit_per_minute)
revenue_df$runtime <- as.numeric(revenue_df$runtime)
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
revenue_df$vote_average <- as.numeric(revenue_df$vote_average)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
?plot_ly
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
View(revenue_df)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(revenue_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
setwd("~/Desktop/Group_Project")
runApp()
