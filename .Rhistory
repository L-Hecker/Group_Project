?numericInput
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
runApp()
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity", value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
library(ggplot2)
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1,
max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color", label = "Color", choices = list(
"Red" = "red", "Blue" = "blue", "Green" = "green"
)
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('~/Desktop/ch16-shiny/exercise-3')
setwd("~/Desktop/groupproject")
setwd("~/Desktop/groupproject")
git status
git status
git pull
load("~/Desktop/Group_Project/.RData")
View(body)
View(body_content)
View(flattened)
setwd("~/Desktop/Group_Project")
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
# Create a list of all the movie ID's and their addition info
revenue_info <- apply(id_list, 1, get_data)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
View(movie_stuff)
# Create a list of movie ID's
id_list <- movie_stuff %>%
select(id)
movie_stuff <- as.data.frame(discover_movie(api_key = movie_db_key, certification_country = "US",
certification.lte = 16, primary_release_year = format(Sys.Date(), "%Y")))
# Create a list of movie ID's
id_list <- movie_stuff %>%
select(id)
View(movie_stuff)
# Create a list of movie ID's
id_list <- movie_stuff %>%
select(results.id)
# Create a function that calls movie info for budget/revenue for each ID
get_data <- function(x) {
id = x[1]
movie(movie_db_key, id)
}
# Create a function that calls movie info for budget/revenue for each ID
get_data <- function(x) {
id = x[1]
movie(movie_db_key, results.id)
}
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
View(revenue_info)
View(revenue_df)
View(movie_choices)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
budget_bar("2018", "Deadpool 2")
shiny::runApp()
runApp()
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
budget_bar(revenue_df, "Deadpool 2")
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
cols <- setNames(c("#2e71c9","#ffb728", "#CCDDDD","#000000"),
c("VVS2", "VS1", "SI1", "IF"))
plot_ly(choice, x = ~ title, y = ~ budget, type = "bar", name = "budget", colors = cols)) %>%
add_trace(y = ~revenue, name = "revenue") %>%
add_trace(y = ~earnings, name = "earnings") %>%
layout(yaxis = list(title = "dollars"), barmode = "group")
plot_ly(choice, x = ~ title, y = ~ budget, type = "bar", name = "budget", colors = cols) %>%
add_trace(y = ~revenue, name = "revenue") %>%
add_trace(y = ~earnings, name = "earnings") %>%
layout(yaxis = list(title = "dollars"), barmode = "group")
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
library(ggplot2)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
}
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp('~/Desktop/INFO_201/web-materials/exercise-1')
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
