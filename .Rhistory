?numericInput
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Install and load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity"), value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
runApp()
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel(
"Cost Calculator"
),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(
"price", label = "Price (in dollars)", value = 0, min = 0
),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(
"quantity", label = "Quantity", value = 1, min = 1
),
# The word "Cost", strongly bolded
p(
strong("Cost")
),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
library(ggplot2)
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
runApp('~/Desktop/ch16-shiny/exercise-3')
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("MPG Dataset Exploration"),
# Add a select input for the x variable
selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
),
# Add a select input for the y variable
selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
),
# Add a sliderInput to set the size of each point
sliderInput("size", label = "Size of point", min = 1,
max = 10, value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput(
"color", label = "Color", choices = list(
"Red" = "red", "Blue" = "blue", "Green" = "green"
)
),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp('~/Desktop/ch16-shiny/exercise-3')
setwd("~/Desktop/groupproject")
setwd("~/Desktop/groupproject")
git status
git status
git pull
load("~/Desktop/Group_Project/.RData")
View(body)
View(body_content)
View(flattened)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
setwd("~/Desktop/Group_Project")
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
shiny::runApp()
# Create a list of all the movie ID's and their addition info
revenue_info <- apply(id_list, 1, get_data)
# Turn list into data frame somehow by accessing each individual list for the movies
# unlist data? and make into data frame?
revenue_df <- data.frame(t(sapply(revenue_info,c)), stringsAsFactors = FALSE) %>%
select(title, overview, budget,release_date,
revenue, runtime, popularity, homepage, poster_path, vote_average, vote_count)
### CREATE NEW COLUMN WITH EARNINGS
revenue_df$earnings <- ifelse((as.numeric(revenue_df$revenue) -
as.numeric(revenue_df$budget)) < 0, 0,
as.numeric(revenue_df$revenue)
- as.numeric(revenue_df$budget))
### set up pictures to be shown in app
revenue_df$poster_path <- shQuote(paste0("https://image.tmdb.org/t/p/w500", revenue_df$poster_path), type = "cmd")
### create a list of choices for shiny
movie_choices <- as.list(revenue_df$title, all.names = TRUE)
names(movie_choices) <- revenue_df$title
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
source('~/Desktop/Group_Project/movie_db.R', echo=TRUE)
revenue_info <- apply(id_list, 1, get_data)
# unlist data? and make into data frame?
revenue_df <- data.frame(t(sapply(revenue_info,c)), stringsAsFactors = FALSE) %>%
select(title, overview, budget,release_date,
revenue, runtime, popularity, homepage, poster_path, vote_average, vote_count)
revenue_df$earnings <- ifelse((as.numeric(revenue_df$revenue) -
as.numeric(revenue_df$budget)) < 0, 0,
as.numeric(revenue_df$revenue)
- as.numeric(revenue_df$budget))
revenue_df$poster_path <- shQuote(paste0("https://image.tmdb.org/t/p/w500", revenue_df$poster_path), type = "cmd")
movie_choices <- as.list(revenue_df$title, all.names = TRUE)
names(movie_choices) <- revenue_df$title
lintr:::addin_lint()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
View(revenue_df)
# Find earnings per minute
revenue_df <- mutate(profit.per.minute = earnings/runtime)
# Find earnings per minute
revenue_df <- revenue_df %>%
mutate(profit.per.minute = earnings/runtime)
# Find earnings per minute
revenue_df <- revenue_df %>%
mutate(profit.per.minute = earnings/runtime)
mutate(profit.per.minute = as.numeric(earnings)/as.numeric(runtime)
# Find earnings per minute
revenue_df <- revenue_df %>%
mutate(profit.per.minute = as.numeric(earnings)/as.numeric(runtime))
revenue_df <- revenue_df %>%
mutate(profit.per.minute = as.numeric(earnings)/as.numeric(runtime))
View(revenue_df)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
setwd("~/Desktop/Group_Project/scripts")
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
minimum <- min(revenue_df$profit.per.minute)
maximum <- max(revenue_df$profit.per.minute)
average <- mean(revenue_df$profit.per.minute)
runApp('~/Desktop/Group_Project')
runApp('~/Desktop/Group_Project')
runApp('~/Desktop/Group_Project')
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp('~/Desktop/Group_Project')
View(revenue_df)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp('~/Desktop/Group_Project')
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
setwd("~/Desktop/Group_Project")
source('~/Desktop/Group_Project/scripts/budget_bar.R', echo=TRUE)
View(movie_stuff)
View(movie_stuff)
year_scatter <- function(year){
movie_stuff <- as.data.frame(discover_movie(
api_key = movie_db_key, certification_country = "US",
certification.lte = 16, primary_release_year = year)
) %>%
plot_ly(movie_stuff, x = ~ results.release.date, y = ~results.popularity, color = ~ results.title)
}
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
View(revenue_df)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
minimum <- min(revenue_df$runtime)
maximum <- max(revenue_df$runtime)
minimum <- min(revenue_df$runtime)
# Find earnings per minute
revenue_df <- revenue_df %>%
mutate(profit.per.minute = as.numeric(earnings)/as.numeric(runtime))
minimum <- min(revenue_df$runtime)
minimum <- min(as.numeric(revenue_df$runtime))
maximum <- max(as.numberic(revenue_df$runtime))
maximum <- max(as.numeric(revenue_df$runtime))
runApp()
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
plot_ly(df, x = ~ runtime == amount, y = ~ profit.per.minute, color = ~ title,
colors = "Set1")
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
average <- mean(as.numeric(revenue_df$runtime))
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
source('~/Desktop/Group_Project/scripts/minute_scatter.R', echo=TRUE)
runApp()
